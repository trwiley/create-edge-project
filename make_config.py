import sys

config = (
    '[project]\n' 
    '##number of cpu\n'
    'cpu=5\n'
    '##store output to [outpath]/[projname]\n' 
    '##outpath=\n'
    f'projname={sys.argv[1]}\n'
    'projdesc=\n'
    'projid=8\n'
    f'projcode={sys.argv[1]}\n'
    'projowner=twiley1@nd.edu\n'
    'projrunhost=http://localhost\n\n'
    '[Download Fastq]\n'
    'DoFastqDownload=auto\n\n'
    '[Download SRA]\n'
    'DoSRADownload=0\n'
    '## SRA accessions ByrRun, ByExp, BySample, ByStudy\n'
    'SRA_id=\n\n'
    '[Count Fastq]\n'
    'DoCountFastq=auto\n'
    'fastq_source=nanopore\n\n'
    '[Quality Trim and Filter]\n'
    '## boolean, 1=yes, 0=no\n'
    'DoQC=1\n'
    '## phred encoding offset,  0 for autocheck\n'
    'qc_phred_offset=0\n'
    '##Targets quality level for trimming\n'
    'q=7\n'
    '##Trimmed sequence length will have at least minimum length\n' 
    'min_L=1000\n'
    '##Average quality cutoff\n'
    'avg_q=0\n'
    '##"N" base cutoff.  Trimmed read has more than this number of continuous base "N" will be discarded.\n' 
    'n=10\n'
    '##Low complexity filter ratio, Maximum fraction of mono-/di-nucleotide sequence\n'
    'lc=0.85\n'
    '## Trim reads with adapters or contamination sequences\n'
    'adapter=\n'
    'porechop=1\n'
    '## Trim polyA (>15)\n'
    'polyA=0\n'
    '## phiX filter, boolean, 1=yes, 0=no\n'
    '## phiX=0\n'
    '## Cut # bp from 5 end before quality trimming/filtering\n' 
    '5end=0\n'
    '## Cut # bp from 3 end before quality trimming/filtering\n' 
    '3end=0\n\n'
    '[Host Removal]\n'
    '## boolean, 1=yes, 0=no\n'
    'DoHostRemoval=0\n'
    '## Use more Host=  to remove multiple host reads\n'
    'Host=\n'
    'bwaMemOptions="-T 50"\n'
    'similarity=90\n\n'
    '[Assembly]\n'
    '## boolean, 1=yes, 0=no\n'
    'DoAssembly=1\n'
    'assembledContigs=\n'
    'inputContigs=\n'
    'minContigSize=200\n'
    '## spades, idba_ud, megahit, unicycler, or lrasm\n' 
    'assembler=lrasm\n'
    'idbaOptions="--pre_correction --mink 31 --maxk 121 --step 20 --min_contig 200"\n'
    '## for spades\n'
    '## support algorithm: default, singlecell,metagenome,plasmid,rna\n'
    'SpadesAlgorithm=default\n'
    'SpadesPacbioFile=\n'
    'SpadesNanoporeFile=\n'
    '## for megahit\n'
    'megahit_preset=meta\n'
    '## for unicycler\n'
    'unicycler_mode=normal\n'
    'unicycler_lreads_file=\n'
    'unicycler_min_lreads=2000\n'
    '## for lrasm\n'
    'lrasm_num_consensus=3\n'
    'lrasm_preset=ont\n'
    'lrasm_ec=0\n'
    'lrasm_algorithm=miniasm\n\n'
    '[Reads Mapping To Contigs]\n'
    '# Reads mapping to contigs\n'
    'DoReadsMappingContigs=auto\n'
    '## support bowtie or bwa or minimap2\n'
    'r2c_aligner=minimap2\n'
    'r2c_aligner_options=\n'
    'r2c_extract_unmapped=0\n\n'
    '[Reads Mapping To Reference]\n'
    '# Reads mapping to reference\n'
    'DoReadsMappingReference=0\n'
    '## support bowtie or bwa or minimap2\n'
    'r2g_aligner=minimap2\n'
    'r2g_aligner_options=\n'
    'r2g_max_clip=150\n'
    'r2g_align_trim_bed_file=\n'
    'r2g_min_mapq=42\n'
    'window_size=1000\n'
    'step_size=200\n'
    'reference=\n'
    'MapUnmappedReads=0\n'
    'r2g_extract_mapped=0\n'
    'r2g_extract_unmapped=0\n'
    'r2g_get_consensus=0\n'
    'r2g_consensus_min_mapQ=42\n'
    'r2g_consensus_max_cov=8000\n'
    'r2g_consensus_alt_prop=0.5\n'
    'r2g_consensus_altIndel_prop=0.5\n'
    'r2g_consensus_min_cov=5\n'
    'r2g_consensus_min_baseQ=5\n'
    'r2g_consensus_disable_BAQ=1\n'
    'r2g_consensus_pcr_dedup=1\n'
    'r2g_consensus_homopolymer_filter=0\n'
    'r2g_consensus_strandbias_filter=0\n'
    'r2g_consensus_comp_opt=0\n'
    'r2g_consensus_varlog_opt=0\n'
    'r2g_variant_call=0\n'
    'r2g_variant_call_min_qual=60\n'
    'r2g_variant_call_ploidy=diploid\n'
    '[Reads Taxonomy Classification]\n'
    '## boolean, 1=yes, 0=no\n'
    'DoReadsTaxonomy=1\n'
    '## If reference genome exists, only use unmapped reads to do Taxonomy Classification. Turn on AllReads=1 will use all reads instead.\n'
    'AllReads=1\n'
    'enabledTools=metaphlan2\n'
    'splitrim-minq=7\n'
    'custom-gottcha-genDB-b=\n'
    'custom-gottcha-speDB-b=\n'
    'custom-gottcha-strDB-b=\n'
    'custom-gottcha-genDB-v=\n'
    'custom-gottcha-speDB-v=\n'
    'custom-gottcha-strDB-v=\n'
    'custom-gottcha2-speDB-b=\n'
    'custom-gottcha2-genDB-v=\n'
    'custom-gottcha2-speDB-v=\n'
    'custom-bwa-db=\n'
    'custom-metaphlan-db=\n'
    'custom-kraken-db=\n'
    'custom-pangia-db=\n'
    'custom-diamond-db=\n\n'
    '[Contigs Mapping To Reference]\n'
    '# Contig mapping to reference\n'
    'DoContigMapping=auto\n'
    '## identity cutoff\n'
    'identity=85\n'
    'MapUnmappedContigs=0\n\n'
    '[Variant Analysis]\n'
    'DoVariantAnalysis=auto\n'
    '[Contigs Taxonomy Classification]\n'
    'DoContigsTaxonomy=0\n'
    '[Contigs Blast]\n'
    'DoBlast=0\n'
    'BLAST_nr_DB=0\n'
    'BLAST_nt_DB=0\n'
    '[Contigs Annotation]\n'
    '## boolean, 1=yes, 0=no\n'
    'DoAnnotation=1\n'
    '## kingdom: Archaea Bacteria Mitochondria Viruses\n'
    'kingdom=Bacteria\n'
    'contig_size_cut_for_annotation=700\n'
    '## support tools: Prokka or RATT\n'
    'annotateProgram=prokka\n'
    '## provide SourceGBK for RATT to transfer annotation\n'
    'annotateSourceGBK=\n'
    'annotation_gcode=11\n'
    'customHMM=\n'
    'customProtein=\n'
    'annotation_evalue=1e-09\n'
    'DoKeggOmicsView=1\n'
    '[ProPhage Detection]\n'
    'DoProPhageDetection=auto\n'
    '[Contigs Binning]\n'
    'DoBinning=0\n'
    'contig_size_cut_for_binning=1000\n'
    'binning-max-itr=50\n'
    'binning-prob=0.9\n'
    'binning-markerset=107\n'
    'binning-abund-file=\n\n'
    '[Binning CheckM]\n'
    'DoCheckM=0\n'
    '[Primer Validation]\n'
    'DoPrimerValidation=0\n'
    'maxMismatch=1\n'
    'primer=\n\n'
    '[Generate JBrowse Tracks]\n'
    'DoJBrowse=1\n'
    'JBrowse_bam_min_depth=300\n\n'
    '[HTML Report]\n'
    'DoHTMLReport=1'
)

with open(f'{sys.argv[1]}/config.txt', 'w') as f:
    f.write(config)
